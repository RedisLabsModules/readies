#!/bin/sh
''''[ ! -z $VIRTUAL_ENV ] && exec python -u -- "$0" ${1+"$@"}; command -v python3 > /dev/null && exec python3 -u -- "$0" ${1+"$@"}; exec python2 -u -- "$0" ${1+"$@"} # '''

import sys
import os
import argparse
import shutil
import tempfile
import traceback

HERE = os.path.dirname(__file__)
READIES = os.path.abspath(os.path.join(HERE, ".."))
sys.path.insert(0, READIES)
import paella  # noqa: F401

os.environ["PYTHONWARNINGS"] = 'ignore:DEPRECATION::pip._internal.cli.base_command'

#----------------------------------------------------------------------------------------------

CMAKE_VER='3.20.2'

#----------------------------------------------------------------------------------------------

class CMakeSetupFromRepo(paella.Setup):
    def __init__(self, args):
        paella.Setup.__init__(self, nop=args.nop)

    def common_first(self):
        pass

    def debian_compat(self):
        self.install("cmake")

    def redhat_compat(self):
        self.run("%s/bin/getepel" % READIES)
        self.install("cmake3")
        self.run("ln -sf `command -v cmake3` /usr/local/bin/cmake")
        self.run("ln -sf `command -v ctest3` /usr/local/bin/ctest")
        self.run("ln -sf `command -v cpack3` /usr/local/bin/cpack")

    def fedora(self):
        self.redhat_compat()

    def macos(self):
        self.install("cmake")

    def common_last(self):
        verstr = paella.sh("cmake --version | head -1 | awk '{print $3}'").strip()
        ver = int(verstr.split('.')[0])
        if ver >= 3:
            print("# installed cmake " + verstr)
            sys.exit(0)
        self.uninstall("cmake", output=False)

#----------------------------------------------------------------------------------------------

class CMakeSetup(paella.Setup):
    def __init__(self, args):
        paella.Setup.__init__(self, nop=args.nop)
        # check whether it is possible to download a pre-built cmake
        self.build = args.build or not (self.os == 'linux' and (self.arch == 'x64' or self.arch.find("arm64") != -1))

    def common_first(self):
        self.install_downloaders()
        if self.build:
            self.install("unzip")
            self.run("%s/bin/getgcc" % READIES)

    def debian_compat(self):
        if self.build:
            self.install("libssl-dev")

    def redhat_compat(self):
        if self.build:
            self.install("openssl-devel")

    def fedora(self):
        self.redhat_compat()

    def macos(self):
        pass

    def linux_last(self):
        if self.arch.find("arm64") != -1:
            url = "https://github.com/Kitware/CMake/releases/download/v3.20.2/cmake-{CMAKE_VER}-linux-aarch64.sh".format(CMAKE_VER=CMAKE_VER)
        else:
            url="https://github.com/Kitware/CMake/releases/download/v{CMAKE_VER}/cmake-{CMAKE_VER}-`uname`-`uname -m`.sh".format(CMAKE_VER=CMAKE_VER)
        if not self.build:
            self.run(r"""
                wget -q -O /tmp/cmake.sh {url}
                sh /tmp/cmake.sh --skip-license --prefix=/usr/local
                rm -f /tmp/cmake.sh
                """.format(url=url))

    def common_last(self):
        if self.build:
            self.run(r"""
                cd /tmp
                cmake_dir=$(mktemp -d)
                cd $cmake_dir
                wget -q -O cmake.zip https://github.com/Kitware/CMake/archive/v{CMAKE_VER}.zip
                unzip -q cmake.zip
                cd CMake-{CMAKE_VER}/
                ./bootstrap --parallel=`nproc`
                make -j`nproc`
                make install
                cd /tmp
                rm -rf $cmake_dir
                """.format(CMAKE_VER=CMAKE_VER))

#----------------------------------------------------------------------------------------------

parser = argparse.ArgumentParser(description='Install CMake')
parser.add_argument('-n', '--nop', action="store_true", help='no operation')
parser.add_argument('--no-repo', action="store_true", help='do not install from distribution repository')
parser.add_argument('--build', action="store_true", help='build from source')
args = parser.parse_args()

try:
    platform = paella.Platform()
    if not args.no_repo and not args.build and (platform.os == 'linux' and platform.arch == 'x64' or platform.os == 'macos'):
        CMakeSetupFromRepo(args).setup()
    CMakeSetup(args).setup()
except Exception as x:
    traceback.print_exc()
    fatal(str(x))

exit(0)
